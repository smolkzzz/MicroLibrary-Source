-- [[ Services ]]
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local CoreGui = game:GetService("CoreGui")

-- [[ Variables ]]
local Client = Players.LocalPlayer
local Mouse = Client:GetMouse()
local Viewport = workspace.CurrentCamera.ViewportSize
local Tweeninfo = TweenInfo.new(.2,Enum.EasingStyle.Quad,Enum.EasingDirection.InOut)

Library = {}

function Library:tween(object,goal,callback)
	local tween = TweenService:Create(object,Tweeninfo,goal)
	tween.Completed:Connect(callback or function() end)
	tween:Play()
end

function Library:validate(defaults, Options)
	for i,v in pairs(defaults) do
		if Options[i] == nil then
			Options[i] = v
		end
	end
	return Options
end

function Library:Init(Options)
	Options = Library:validate({
		Name = game.Name .. " Script";
		Toggle = "LeftShift";
		GameIdNeeded = false;
		GameId = 0;
		KickIfWrongGameId = false;
		KickReason = "string";
		KeySystem = false;
		CorrectKey = "Hello World!";
		GetkeyLink = "https://link";
		Size = UDim2.new(0,400,0,300);
	},Options or {})
	
	local GUI = {
		CurrentTab = nil;
		Opened = true;
	}
	
	if Client:FindFirstChild("PlayerGui") then
		if Client:WaitForChild("PlayerGui"):FindFirstChild("MicroLibrary") then
			Client:WaitForChild("PlayerGui"):FindFirstChild("MicroLibrary"):Destroy()
		elseif CoreGui:FindFirstChild("MicroLibrary") then
			CoreGui:FindFirstChild("MicroLibrary"):Destroy()
		end
	end
	
	-- [[ Render ]]
	do
		-- StarterGui.MicroLibrary
		GUI["1"] = Instance.new("ScreenGui", RunService:IsStudio() and Client:WaitForChild("PlayerGui") or CoreGui);
		GUI["1"]["ResetOnSpawn"] = false;
		GUI["1"]["IgnoreGuiInset"] = true;
		GUI["1"]["Name"] = [[MicroLibrary]];

		-- StarterGui.MicroLibrary.Main
		GUI["2"] = Instance.new("Frame", GUI["1"]);
		GUI["2"]["BackgroundColor3"] = Color3.fromRGB(43, 43, 43);
		GUI["2"]["AnchorPoint"] = Vector2.new(0,0);
		GUI["2"]["Size"] = Options.Size;
		GUI["2"]["Position"] = UDim2.fromOffset((Viewport.X /2) - (GUI["2"].Size.X.Offset /2),(Viewport.Y /2) - (GUI["2"].Size.Y.Offset /2));
		GUI["2"]["Name"] = [[Main]];
		GUI["2"]["Active"] = true;
		GUI["2"]["Draggable"] = true;

		-- StarterGui.MicroLibrary.Main.UICorner
		GUI["3"] = Instance.new("UICorner", GUI["2"]);
		GUI["3"]["CornerRadius"] = UDim.new(0, 4);

		-- StarterGui.MicroLibrary.Main.shadowHolder
		GUI["4"] = Instance.new("Frame", GUI["2"]);
		GUI["4"]["ZIndex"] = 0;
		GUI["4"]["BackgroundTransparency"] = 1;
		GUI["4"]["Size"] = UDim2.new(1, 0, 1, 0);
		GUI["4"]["Name"] = [[shadowHolder]];

		-- StarterGui.MicroLibrary.Main.shadowHolder.umbraShadow
		GUI["5"] = Instance.new("ImageLabel", GUI["4"]);
		GUI["5"]["ZIndex"] = 0;
		GUI["5"]["SliceCenter"] = Rect.new(10, 10, 118, 118);
		GUI["5"]["ScaleType"] = Enum.ScaleType.Slice;
		GUI["5"]["ImageColor3"] = Color3.fromRGB(0, 0, 0);
		GUI["5"]["ImageTransparency"] = 0.8600000143051147;
		GUI["5"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
		GUI["5"]["Image"] = [[rbxassetid://1316045217]];
		GUI["5"]["Size"] = UDim2.new(1, 10, 1, 10);
		GUI["5"]["Name"] = [[umbraShadow]];
		GUI["5"]["BackgroundTransparency"] = 1;
		GUI["5"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);

		-- StarterGui.MicroLibrary.Main.shadowHolder.penumbraShadow
		GUI["6"] = Instance.new("ImageLabel", GUI["4"]);
		GUI["6"]["ZIndex"] = 0;
		GUI["6"]["SliceCenter"] = Rect.new(10, 10, 118, 118);
		GUI["6"]["ScaleType"] = Enum.ScaleType.Slice;
		GUI["6"]["ImageColor3"] = Color3.fromRGB(0, 0, 0);
		GUI["6"]["ImageTransparency"] = 0.8799999952316284;
		GUI["6"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
		GUI["6"]["Image"] = [[rbxassetid://1316045217]];
		GUI["6"]["Size"] = UDim2.new(1, 10, 1, 10);
		GUI["6"]["Name"] = [[penumbraShadow]];
		GUI["6"]["BackgroundTransparency"] = 1;
		GUI["6"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);

		-- StarterGui.MicroLibrary.Main.shadowHolder.ambientShadow
		GUI["7"] = Instance.new("ImageLabel", GUI["4"]);
		GUI["7"]["ZIndex"] = 0;
		GUI["7"]["SliceCenter"] = Rect.new(10, 10, 118, 118);
		GUI["7"]["ScaleType"] = Enum.ScaleType.Slice;
		GUI["7"]["ImageColor3"] = Color3.fromRGB(0, 0, 0);
		GUI["7"]["ImageTransparency"] = 0.8799999952316284;
		GUI["7"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
		GUI["7"]["Image"] = [[rbxassetid://1316045217]];
		GUI["7"]["Size"] = UDim2.new(1, 10, 1, 10);
		GUI["7"]["Name"] = [[ambientShadow]];
		GUI["7"]["BackgroundTransparency"] = 1;
		GUI["7"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);

		-- StarterGui.MicroLibrary.Main.TopBar
		GUI["8"] = Instance.new("Frame", GUI["2"]);
		GUI["8"]["BorderSizePixel"] = 0;
		GUI["8"]["BackgroundColor3"] = Color3.fromRGB(39, 39, 39);
		GUI["8"]["Size"] = UDim2.new(1, 0, 0, 30);
		GUI["8"]["Name"] = [[TopBar]];

		-- StarterGui.MicroLibrary.Main.TopBar.UICorner
		GUI["9"] = Instance.new("UICorner", GUI["8"]);
		GUI["9"]["CornerRadius"] = UDim.new(0, 4);

		-- StarterGui.MicroLibrary.Main.TopBar.Hide
		GUI["a"] = Instance.new("Frame", GUI["8"]);
		GUI["a"]["BorderSizePixel"] = 0;
		GUI["a"]["BackgroundColor3"] = Color3.fromRGB(39, 39, 39);
		GUI["a"]["AnchorPoint"] = Vector2.new(0, 1);
		GUI["a"]["Size"] = UDim2.new(1, 0, 0.25, 0);
		GUI["a"]["Position"] = UDim2.new(0, 0, 1, 0);
		GUI["a"]["Name"] = [[Hide]];

		-- StarterGui.MicroLibrary.Main.TopBar.Line
		GUI["b"] = Instance.new("Frame", GUI["8"]);
		GUI["b"]["BorderSizePixel"] = 0;
		GUI["b"]["BackgroundColor3"] = Color3.fromRGB(86, 0, 0);
		GUI["b"]["AnchorPoint"] = Vector2.new(0, 1);
		GUI["b"]["Size"] = UDim2.new(1, 0, 0.05000000074505806, 0);
		GUI["b"]["Position"] = UDim2.new(0, 0, 1, 0);
		GUI["b"]["Name"] = [[Line]];

		-- StarterGui.MicroLibrary.Main.TopBar.Title
		GUI["c"] = Instance.new("TextLabel", GUI["8"]);
		GUI["c"]["TextXAlignment"] = Enum.TextXAlignment.Left;
		GUI["c"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
		-- GUI["c"]["FontFace"] = ;
		GUI["c"]["TextSize"] = 14;
		GUI["c"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
		GUI["c"]["Size"] = UDim2.new(0, 200, 1, -3);
		GUI["c"]["Text"] = "MicroLibrary | " .. Options.Name;
		GUI["c"]["Name"] = [[Title]];
		GUI["c"]["Font"] = Enum.Font.Gotham;
		GUI["c"]["BackgroundTransparency"] = 1;

		-- StarterGui.MicroLibrary.Main.TopBar.Title.UIPadding
		GUI["d"] = Instance.new("UIPadding", GUI["c"]);
		GUI["d"]["PaddingLeft"] = UDim.new(0, 2);

		-- StarterGui.MicroLibrary.Main.TopBar.Close
		GUI["e"] = Instance.new("TextButton", GUI["8"]);
		GUI["e"]["TextWrapped"] = true;
		GUI["e"]["AutoButtonColor"] = false;
		GUI["e"]["TextScaled"] = true;
		GUI["e"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
		GUI["e"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
		-- GUI["e"]["FontFace"] = ;
		GUI["e"]["AnchorPoint"] = Vector2.new(1, 0);
		GUI["e"]["Size"] = UDim2.new(0, 27, 1, -3);
		GUI["e"]["Name"] = [[Close]];
		GUI["e"]["ClipsDescendants"] = true;
		GUI["e"]["Text"] = [[X]];
		GUI["e"]["Font"] = Enum.Font.GothamBold;
		GUI["e"]["Position"] = UDim2.new(1, 0, 0, 0);
		GUI["e"]["BackgroundTransparency"] = 1;

		-- StarterGui.MicroLibrary.Main.ContentContainer
		GUI["f"] = Instance.new("Frame", GUI["2"]);
		GUI["f"]["BackgroundColor3"] = Color3.fromRGB(81, 81, 81);
		GUI["f"]["AnchorPoint"] = Vector2.new(1, 0);
		GUI["f"]["BackgroundTransparency"] = 1;
		GUI["f"]["Size"] = UDim2.new(1, -110, 1, -40);
		GUI["f"]["Position"] = UDim2.new(1, -5, 0, 35);
		GUI["f"]["Name"] = [[ContentContainer]];
	end
	local CloseHover = false
	GUI["e"].MouseEnter:Connect(function()
		CloseHover = true
	end)
	GUI["e"].MouseLeave:Connect(function()
		CloseHover = false
	end)
	
	UserInputService.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			if CloseHover then
				GUI["2"]:TweenSize(UDim2.new(0,0,0))
				repeat GUI["2"].Position = UDim2.fromOffset((Viewport.X /2) - (GUI["2"].Size.X.Offset /2),(Viewport.Y /2) - (GUI["2"].Size.Y.Offset /2)) until GUI["2"].Size == Options.Size
				GUI["1"]:Destroy()
				GUI.CloseHover = false
			end
		elseif input.KeyCode == Options.Toggle then
			if GUI.Opened then
				Library:tween(GUI["2"],{Position = UDim2.fromOffset((Viewport.X /2) - (GUI["2"].Size.X.Offset /2),(Viewport.Y /2) - (GUI["2"].Size.Y.Offset /2))})
				wait(1)
				Library:tween(GUI["2"],{Position = UDim2.new(0,(Viewport.X /2) - (GUI["2"].Size.X.Offset /2),1,(Viewport.Y /2) - (GUI["2"].Size.Y.Offset /2))})
				repeat wait() until GUI["2"].Position == UDim2.new(0,(Viewport.X /2) - (GUI["2"].Size.X.Offset /2),1,(Viewport.Y /2) - (GUI["2"].Size.Y.Offset /2))
				GUI.Opened = false
				GUI["1"].Enabled = false
				GUI["2"].Size = UDim2.new(0,0,0,0)
				GUI["2"].Position = UDim2.fromOffset((Viewport.X /2) - (GUI["2"].Size.X.Offset /2),(Viewport.Y /2) - (GUI["2"].Size.Y.Offset /2))
			else
				GUI["1"].Enabled = true
				GUI["2"]:TweenSize(Options.Size)
				repeat GUI["2"].Position = UDim2.fromOffset((Viewport.X /2) - (GUI["2"].Size.X.Offset /2),(Viewport.Y /2) - (GUI["2"].Size.Y.Offset /2)) until GUI["2"].Size == Options.Size
				GUI.Opened = true
			end
		end
	end)
	
	-- [[ Navigation ]]
	do
		-- StarterGui.MicroLibrary.Main.Navigation
		GUI["49"] = Instance.new("Frame", GUI["2"]);
		GUI["49"]["BackgroundColor3"] = Color3.fromRGB(49, 49, 49);
		GUI["49"]["AnchorPoint"] = Vector2.new(0, 1);
		GUI["49"]["Size"] = UDim2.new(0, 100, 1, -30);
		GUI["49"]["Position"] = UDim2.new(0, 0, 1, 0);
		GUI["49"]["Name"] = [[Navigation]];

		-- StarterGui.MicroLibrary.Main.Navigation.UICorner
		GUI["4a"] = Instance.new("UICorner", GUI["49"]);
		GUI["4a"]["CornerRadius"] = UDim.new(0, 4);

		-- StarterGui.MicroLibrary.Main.Navigation.Hide
		GUI["4b"] = Instance.new("Frame", GUI["49"]);
		GUI["4b"]["BorderSizePixel"] = 0;
		GUI["4b"]["BackgroundColor3"] = Color3.fromRGB(49, 49, 49);
		GUI["4b"]["Size"] = UDim2.new(1, 0, 0, 5);
		GUI["4b"]["Name"] = [[Hide]];

		-- StarterGui.MicroLibrary.Main.Navigation.Hide2
		GUI["4c"] = Instance.new("Frame", GUI["49"]);
		GUI["4c"]["BorderSizePixel"] = 0;
		GUI["4c"]["BackgroundColor3"] = Color3.fromRGB(49, 49, 49);
		GUI["4c"]["AnchorPoint"] = Vector2.new(1, 0);
		GUI["4c"]["Size"] = UDim2.new(0, 5, 1, 0);
		GUI["4c"]["Position"] = UDim2.new(1, 0, 0, 0);
		GUI["4c"]["Name"] = [[Hide2]];

		-- StarterGui.MicroLibrary.Main.Navigation.Tabs
		GUI["4d"] = Instance.new("ScrollingFrame", GUI["49"]);
		GUI["4d"]["Active"] = true;
		GUI["4d"]["BorderSizePixel"] = 0;
		GUI["4d"]["CanvasSize"] = UDim2.new(0, 0, 10, 0);
		GUI["4d"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
		GUI["4d"]["BackgroundTransparency"] = 1;
		GUI["4d"]["Size"] = UDim2.new(1, 0, 1, 0);
		GUI["4d"]["ScrollBarImageColor3"] = Color3.fromRGB(0, 0, 0);
		GUI["4d"]["ScrollBarThickness"] = 0;
		GUI["4d"]["Name"] = [[Tabs]];

		-- StarterGui.MicroLibrary.Main.Navigation.Tabs.UIListLayout
		GUI["4e"] = Instance.new("UIListLayout", GUI["4d"]);
		GUI["4e"]["SortOrder"] = Enum.SortOrder.LayoutOrder;
	end	
	
	-- [[ Notifications ]]
	do
		-- StarterGui.MicroLibrary.Notifications
		GUI["64"] = Instance.new("Frame", GUI["1"]);
		GUI["64"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
		GUI["64"]["AnchorPoint"] = Vector2.new(1, 0.5);
		GUI["64"]["BackgroundTransparency"] = 1;
		GUI["64"]["Size"] = UDim2.new(0.2166377753019333, 0, 0.9660326242446899, 0);
		GUI["64"]["ClipsDescendants"] = true;
		GUI["64"]["Position"] = UDim2.new(0.989168107509613, 0, 0.5, 0);
		GUI["64"]["Name"] = [[Notifications]];

		-- StarterGui.MicroLibrary.Notifications.UIListLayout
		GUI["65"] = Instance.new("UIListLayout", GUI["64"]);
		GUI["65"]["VerticalAlignment"] = Enum.VerticalAlignment.Bottom;
		GUI["65"]["SortOrder"] = Enum.SortOrder.LayoutOrder;
	end
	
	function GUI:Tab(Options)
		Options = Library:validate({
			Name = "Preview Tab";
			Icon = "rbxassetid://12222879857";
		},Options or {})
		
		local Tab = {
			Hover = false;
			Active = false;
		}
		
		-- [[ Render ]]
		do
			-- StarterGui.MicroLibrary.Main.Navigation.Tabs.Inactive
			Tab["51"] = Instance.new("TextLabel", GUI["4d"]);
			Tab["51"]["TextWrapped"] = true;
			Tab["51"]["BorderSizePixel"] = 0;
			Tab["51"]["BackgroundColor3"] = Color3.fromRGB(58, 58, 58);
			Tab["51"]["TextTransparency"] = 0.6000000238418579;
			-- Tab["51"]["FontFace"] = ;
			Tab["51"]["Selectable"] = true;
			Tab["51"]["TextSize"] = 14;
			Tab["51"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
			Tab["51"]["Size"] = UDim2.new(1, 0, 0, 25);
			Tab["51"]["Active"] = true;
			Tab["51"]["Text"] = Options.Name;
			Tab["51"]["Name"] = [[Tab]];
			Tab["51"]["Font"] = Enum.Font.Ubuntu;
			Tab["51"]["BackgroundTransparency"] = 0.6000000238418579;
			Tab["51"]["TextXAlignment"] = Enum.TextXAlignment.Left;
			
			Tab["UIPadding"] = Instance.new("UIPadding",Tab["51"])
			Tab["UIPadding"]["PaddingLeft"] = UDim.new(0,25)

			-- StarterGui.MicroLibrary.Main.Navigation.Tabs.Inactive.Icon
			Tab["52"] = Instance.new("ImageLabel", Tab["51"]);
			Tab["52"]["AnchorPoint"] = Vector2.new(1,0);
			Tab["52"]["ScaleType"] = Enum.ScaleType.Tile;
			Tab["52"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
			Tab["52"]["ImageTransparency"] = 0.6000000238418579;
			Tab["52"]["Image"] = Options.Icon;
			Tab["52"]["Size"] = UDim2.new(0, 25, 1, 0);
			Tab["52"]["Name"] = [[Icon]];
			Tab["52"]["BackgroundTransparency"] = 1;
			
			-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab
			Section["18"] = Instance.new("ScrollingFrame", GUI["f"]);
			Section["18"]["Active"] = true;
			Section["18"]["BorderSizePixel"] = 0;
			Section["18"]["CanvasSize"] = UDim2.new(0, 0, 10, 0);
			Section["18"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
			Section["18"]["BackgroundTransparency"] = 1;
			Section["18"]["Size"] = UDim2.new(1, 0, 1, 0);
			Section["18"]["ScrollBarImageColor3"] = Color3.fromRGB(0, 0, 0);
			Section["18"]["ScrollBarThickness"] = 0;
			Section["18"]["Name"] = [[Tab]];
			Section["18"]["Visible"] = false;

			-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.UIListLayout
			Tab["11"] = Instance.new("UIListLayout", Section["18"]);
			Tab["11"]["Padding"] = UDim.new(0, 5);
			Tab["11"]["SortOrder"] = Enum.SortOrder.LayoutOrder;
			
			-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.UIPadding
			Tab["12"] = Instance.new("UIPadding", Section["18"]);
			Tab["12"]["PaddingBottom"] = UDim.new(0, 1);
			Tab["12"]["PaddingLeft"] = UDim.new(0, 1);
			Tab["12"]["PaddingRight"] = UDim.new(0, 1);
			Tab["12"]["PaddingTop"] = UDim.new(0, 1);
		end
		
		-- [[ Methods ]]
		function Tab:Activate()
			if GUI.CurrentTab ~= nil then
				GUI.CurrentTab:Deactivate()
			end
			Tab.Active = true
			Tab.Hover = true
			Library:tween(Tab["51"],{TextTransparency = 0})
			Library:tween(Tab["51"],{BackgroundTransparency = 0})
			Library:tween(Tab["52"],{ImageTransparency = 0})
			Section["18"].Visible = true
			
			GUI.CurrentTab = Tab
		end
		
		function Tab:Deactivate()
			Tab.Active = false
			Tab.Hover = false
			Library:tween(Tab["51"],{TextTransparency = 0.6})
			Library:tween(Tab["51"],{BackgroundTransparency = 0.6})
			Library:tween(Tab["52"],{ImageTransparency = 0.6})
			Section["18"].Visible = false
		end
		
		-- [[ Logic ]]
		do
			Tab["51"].MouseEnter:Connect(function()
				if not Tab.Active then
					Tab.Hover = true
					Library:tween(Tab["51"],{TextTransparency = 0})
					Library:tween(Tab["52"],{ImageTransparency = 0})
				end
			end)
			Tab["51"].MouseLeave:Connect(function()
				if not Tab.Active then
					Tab.Hover = false
					Library:tween(Tab["51"],{TextTransparency = 0.6})
					Library:tween(Tab["52"],{ImageTransparency = 0.6})
				end
			end)
			UserInputService.InputBegan:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 then
					if Tab.Hover then
						Tab:Activate()
					end
				end
			end)
			
			if GUI.CurrentTab == nil then
				Tab:Activate()
			end
		end		

		function Tab:Section(Options)
			Options = Library:validate({
				Title = "Section Preview"
			},Options or {})

			local Section = {
				Opened = false;
			}

			-- [[ Render ]]
			do
				-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.Section
				Section["18"] = Instance.new("Frame", Tab["10"]);
				Section["18"]["BackgroundColor3"] = Color3.fromRGB(45, 45, 45);
				Section["18"]["Size"] = UDim2.new(1, 0, 0, 120);
				Section["18"]["Name"] = [[Section]];

				-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.Section.UIStroke
				Section["19"] = Instance.new("UIStroke", Section["18"]);
				Section["19"]["Color"] = Color3.fromRGB(108, 108, 108);
				Section["19"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;

				-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.Section.UICorner
				Section["1a"] = Instance.new("UICorner", Section["18"]);
				Section["1a"]["CornerRadius"] = UDim.new(0, 4);

				-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.Section.Container
				Section["1b"] = Instance.new("Frame", Section["18"]);
				Section["1b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
				Section["1b"]["AnchorPoint"] = Vector2.new(0, 1);
				Section["1b"]["BackgroundTransparency"] = 1;
				Section["1b"]["Size"] = UDim2.new(1, -10, 1, -35);
				Section["1b"]["Position"] = UDim2.new(0, 5, 1, -5);
				Section["1b"]["Name"] = [[Container]];

				-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.Section.Container.UIPadding
				Section["1c"] = Instance.new("UIPadding", Section["1b"]);
				Section["1c"]["PaddingTop"] = UDim.new(0, 1);
				Section["1c"]["PaddingRight"] = UDim.new(0, 1);
				Section["1c"]["PaddingBottom"] = UDim.new(0, 1);
				Section["1c"]["PaddingLeft"] = UDim.new(0, 1);

				-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.Section.Container.UIListLayout
				Section["1d"] = Instance.new("UIListLayout", Section["1b"]);
				Section["1d"]["SortOrder"] = Enum.SortOrder.LayoutOrder;

				-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.Section.Click
				Section["1e"] = Instance.new("TextLabel", Section["18"]);
				Section["1e"]["TextXAlignment"] = Enum.TextXAlignment.Left;
				Section["1e"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
				-- Section["1e"]["FontFace"] = ;
				Section["1e"]["Selectable"] = true;
				Section["1e"]["TextSize"] = 14;
				Section["1e"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
				Section["1e"]["Size"] = UDim2.new(1, -35, 0, 20);
				Section["1e"]["Active"] = true;
				Section["1e"]["Text"] = [[Section]];
				Section["1e"]["Name"] = [[Click]];
				Section["1e"]["Font"] = Enum.Font.Ubuntu;
				Section["1e"]["BackgroundTransparency"] = 1;
				Section["1e"]["Position"] = UDim2.new(0, 5, 0, 5);

				-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.Section.Icon
				Section["1f"] = Instance.new("ImageLabel", Section["18"]);
				Section["1f"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
				Section["1f"]["AnchorPoint"] = Vector2.new(1, 0);
				Section["1f"]["Image"] = [[rbxassetid://10889644850]];
				Section["1f"]["Size"] = UDim2.new(0, 20, 0, 20);
				Section["1f"]["Name"] = [[Icon]];
				Section["1f"]["BackgroundTransparency"] = 1;
				Section["1f"]["Position"] = UDim2.new(1, -5, 0, 5);
			end

			function Section:_Toggle()
				if Section.Opened then

				else
					local Y = 0
					for i,v in pairs(Section["1b"]:GetChildren()) do
						if v ~= nil then
							Y += v.Size.Y.Offset
						end
					end

					Library:tween(Section["18"],{Size = UDim2.new(1,0,0,30 + (Y))})
				end
			end

			-- [[ Render Buttons ]]
		do
			function Tab:Button(Options)
				Options = Library:validate({
					Name = [[Button Preview]];
					Callback = function() end;
				},Options or {})
				
				local Button = {
					Hover = false;
					MouseDown = false;
				}
				
				-- [[ Render ]]
				do
					-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.Button
					Button["12"] = Instance.new("Frame", Section["18"]);
					Button["12"]["BackgroundColor3"] = Color3.fromRGB(45, 45, 45);
					Button["12"]["Size"] = UDim2.new(1, 0, 0, 30);
					Button["12"]["Name"] = [[Button]];
	
					-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.Button.UICorner
					Button["13"] = Instance.new("UICorner", Button["12"]);
					Button["13"]["CornerRadius"] = UDim.new(0, 4);
	
					-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.Button.UIStroke
					Button["14"] = Instance.new("UIStroke", Button["12"]);
					Button["14"]["Color"] = Color3.fromRGB(108, 108, 108);
					Button["14"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;
	
					-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.Button.Icon
					Button["15"] = Instance.new("ImageLabel", Button["12"]);
					Button["15"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
					Button["15"]["AnchorPoint"] = Vector2.new(1, 0);
					Button["15"]["Image"] = [[rbxassetid://12222922560]];
					Button["15"]["Size"] = UDim2.new(0, 30, 1, 0);
					Button["15"]["Name"] = [[Icon]];
					Button["15"]["BackgroundTransparency"] = 1;
					Button["15"]["Position"] = UDim2.new(1, 0, 0, 0);
	
					-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.Button.Click
					Button["16"] = Instance.new("TextLabel", Button["12"]);
					Button["16"]["TextXAlignment"] = Enum.TextXAlignment.Left;
					Button["16"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
					-- Button["16"]["FontFace"] = ;
					Button["16"]["Selectable"] = true;
					Button["16"]["TextSize"] = 14;
					Button["16"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
					Button["16"]["AnchorPoint"] = Vector2.new(0, 0.5);
					Button["16"]["Size"] = UDim2.new(1, -35, 1, -10);
					Button["16"]["Active"] = true;
					Button["16"]["Text"] = Options.Name;
					Button["16"]["Name"] = [[Click]];
					Button["16"]["Font"] = Enum.Font.Ubuntu;
					Button["16"]["BackgroundTransparency"] = 1;
					Button["16"]["Position"] = UDim2.new(0, 5, 0.5, 0);
				end
				
				-- [[ Methods]]
				function Button:SetText(txt)
					Options.Name = txt
					Button["16"].Text = Options.Name
				end
				
				function Button:SetCallback(func)
					Button.Callback = func
				end
	
				function Button:Delete()
					Button["12"]:Destroy()
				end
				
				-- [[ Logic ]]
				do
					Button["12"].MouseEnter:Connect(function()
						Button.Hover = true
						Library:tween(Button["14"],{Color = Color3.fromRGB(180,180,180)})
					end)
					
					Button["12"].MouseLeave:connect(function()
						Button.Hover = false
						
						if not Button.MouseDown then
							Library:tween(Button["14"],{Color = Color3.fromRGB(108,108,108)})
						end
					end)
					
					UserInputService.InputBegan:Connect(function(input)
						if input.UserInputType == Enum.UserInputType.MouseButton1 and Button.Hover then
							Button.MouseDown = true
							Library:tween(Button["12"],{BackgroundColor3 = Color3.fromRGB(136, 136, 136)})
							Library:tween(Button["14"],{Color = Color3.fromRGB(200,200,200)})
							Options.Callback()
						end
					end)
					
					UserInputService.InputEnded:Connect(function(input)
						if input.UserInputType == Enum.UserInputType.MouseButton1 then
							Button.MouseDown = false
							
							if Button.Hover then
								-- [[ Hovering State ]]
								Library:tween(Button["12"],{BackgroundColor3 = Color3.fromRGB(45,45,45)})
								Library:tween(Button["14"],{Color = Color3.fromRGB(180,180,180)})
							else
								-- [[ Reset ]]
								Library:tween(Button["12"],{BackgroundColor3 = Color3.fromRGB(45,45,45)})
								Library:tween(Button["14"],{Color = Color3.fromRGB(108,108,108)})
							end
						end
					end)
				end
	
				return Button
			end
			
			function Tab:Warn(Options)
				Options = Library:validate({
					Message = [[Warning Preview]];
				},Options or {})
				
				local Warning = {}
				
				-- [[ Render ]]
				do
					-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.Warning
					Warning["18"] = Instance.new("Frame", Section["18"]);
					Warning["18"]["BackgroundColor3"] = Color3.fromRGB(62, 62, 12);
					Warning["18"]["Size"] = UDim2.new(1, 0, 0, 30);
					Warning["18"]["Name"] = [[Warning]];
	
					-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.Warning.UICorner
					Warning["19"] = Instance.new("UICorner", Warning["18"]);
					Warning["19"]["CornerRadius"] = UDim.new(0, 4);
	
					-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.Warning.UIStroke
					Warning["1a"] = Instance.new("UIStroke", Warning["18"]);
					Warning["1a"]["Color"] = Color3.fromRGB(89, 89, 17);
					Warning["1a"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;
	
					-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.Warning.Icon
					Warning["1b"] = Instance.new("ImageLabel", Warning["18"]);
					Warning["1b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
					Warning["1b"]["Image"] = [[rbxassetid://12222946364]];
					Warning["1b"]["Size"] = UDim2.new(0, 30, 1, 0);
					Warning["1b"]["Name"] = [[Icon]];
					Warning["1b"]["BackgroundTransparency"] = 1;
	
					-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.Warning.Text
					Warning["1c"] = Instance.new("TextLabel", Warning["18"]);
					Warning["1c"]["TextXAlignment"] = Enum.TextXAlignment.Left;
					Warning["1c"]["TextYAlignment"] = Enum.TextYAlignment.Top;
					Warning["1c"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
					-- Warning["1c"]["FontFace"] = ;
					Warning["1c"]["Selectable"] = true;
					Warning["1c"]["TextSize"] = 14;
					Warning["1c"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
					Warning["1c"]["AnchorPoint"] = Vector2.new(1, 0.5);
					Warning["1c"]["Size"] = UDim2.new(1, 0, 1, -10);
					Warning["1c"]["Active"] = true;
					Warning["1c"]["Text"] = Options.Message;
					Warning["1c"]["Name"] = [[Text]];
					Warning["1c"]["Font"] = Enum.Font.Ubuntu;
					Warning["1c"]["BackgroundTransparency"] = 1;
					Warning["1c"]["Position"] = UDim2.new(1, -5, 0.5, 0);
					Warning["1c"]["TextWrapped"] = true;
	
					Warning["Padding"] = Instance.new("UIPadding", Warning["1c"]);
					Warning["Padding"]["PaddingLeft"] = UDim.new(0, 35)
				end
	
				-- [[ Methods ]]
				function Warning:SetText(txt)
					Options.Message = txt
					Warning:_Update()
				end
	
				function Warning:Delete()
					Warning["18"]:Destroy()
				end
	
				function Warning:_Update()
					Warning["1c"].Text = Options.Message
	
					Warning["18"].Size = UDim2.new(Warning["1c"].Size.X.Scale,Warning["1c"].Size.X.Offset,0,math.huge)
					Warning["18"].Size = UDim2.new(Warning["1c"].Size.X.Scale,Warning["1c"].Size.X.Offset,0,Warning["1c"].TextBounds.Y)
					Warning["18"].Size = UDim2.new(Warning["18"].Size.X.Scale,Warning["18"].Size.X.Offset,0,Warning["1c"].TextBounds.Y + 10)
				end
	
				Warning:_Update()
				return Warning	
			end
			
			function Tab:Info(Options)
				Options = Library:validate({
					Message = [[Info Preview]];
				},Options or {})
				
				local Info = {}
				
				-- [[ Render ]]
				do
					-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.Info
					Info["1d"] = Instance.new("Frame", Section["18"]);
					Info["1d"]["BackgroundColor3"] = Color3.fromRGB(16, 16, 81);
					Info["1d"]["Size"] = UDim2.new(1, 0, 0, 30);
					Info["1d"]["Name"] = [[Info]];
	
					-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.Info.UICorner
					Info["1e"] = Instance.new("UICorner", Info["1d"]);
					Info["1e"]["CornerRadius"] = UDim.new(0, 4);
	
					-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.Info.UIStroke
					Info["1f"] = Instance.new("UIStroke", Info["1d"]);
					Info["1f"]["Color"] = Color3.fromRGB(30, 30, 153);
					Info["1f"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;
	
					-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.Info.Icon
					Info["20"] = Instance.new("ImageLabel", Info["1d"]);
					Info["20"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
					Info["20"]["Image"] = [[rbxassetid://12222971215]];
					Info["20"]["Size"] = UDim2.new(0, 30, 1, 0);
					Info["20"]["Name"] = [[Icon]];
					Info["20"]["BackgroundTransparency"] = 1;
	
					-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.Info.Text
					Info["21"] = Instance.new("TextLabel", Info["1d"]);
					Info["21"]["TextXAlignment"] = Enum.TextXAlignment.Left;
					Info["21"]["TextYAlignment"] = Enum.TextYAlignment.Top;
					Info["21"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
					-- Info["21"]["FontFace"] = ;
					Info["21"]["Selectable"] = true;
					Info["21"]["TextSize"] = 14;
					Info["21"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
					Info["21"]["AnchorPoint"] = Vector2.new(0, 0);
					Info["21"]["Size"] = UDim2.new(1, 0, 1, -10);
					Info["21"]["Active"] = true;
					Info["21"]["Text"] = Options.Message;
					Info["21"]["Name"] = [[Text]];
					Info["21"]["Font"] = Enum.Font.Ubuntu;
					Info["21"]["BackgroundTransparency"] = 1;
					Info["21"]["Position"] = UDim2.new(0, 5, 0, 5);
					Info["21"]["TextWrapped"] = true;
	
					Info["Padding"] = Instance.new("UIPadding", Info["21"]);
					Info["Padding"]["PaddingLeft"] = UDim.new(0, 35)
				end
				
				-- [[ Methods ]]
				function Info:SetText(txt)
					Options.Message = txt
				end
	
				function Info:Delete()
					Info["1d"]:Destroy()
				end
	
				function Info:_Update()
					Info["21"].Text = Options.Message
	
					Info["1d"].Size = UDim2.new(Info["21"].Size.X.Scale,Info["21"].Size.X.Offset,0,math.huge)
					Info["1d"].Size = UDim2.new(Info["21"].Size.X.Scale,Info["21"].Size.X.Offset,0,Info["21"].TextBounds.Y)
					Info["1d"].Size = UDim2.new(Info["1d"].Size.X.Scale,Info["1d"].Size.X.Offset,0,Info["21"].TextBounds.Y + 10)
				end
	
				Info:_Update()
				return Info	
			end
			
			function Tab:Label(Options)
				Options = Library:validate({
					Message = [[Label Preview]];
				},Options or {})
				
				local Label = {}
				
				-- [[ Render ]
				do
					-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.Label
					Label["22"] = Instance.new("Frame", Section["18"]);
					Label["22"]["BackgroundColor3"] = Color3.fromRGB(45, 45, 45);
					Label["22"]["Size"] = UDim2.new(1, 0, 0, 30);
					Label["22"]["Name"] = [[Label]];
	
					-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.Label.UICorner
					Label["23"] = Instance.new("UICorner", Label["22"]);
					Label["23"]["CornerRadius"] = UDim.new(0, 4);
	
					-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.Label.UIStroke
					Label["24"] = Instance.new("UIStroke", Label["22"]);
					Label["24"]["Color"] = Color3.fromRGB(108, 108, 108);
					Label["24"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;
	
					-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.Label.Icon
					Label["25"] = Instance.new("ImageLabel", Label["22"]);
					Label["25"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
					Label["25"]["Image"] = [[rbxassetid://12222991501]];
					Label["25"]["Size"] = UDim2.new(0, 30, 1, 0);
					Label["25"]["Name"] = [[Icon]];
					Label["25"]["BackgroundTransparency"] = 1;
	
					-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.Label.Text
					Label["26"] = Instance.new("TextLabel", Label["22"]);
					Label["26"]["TextXAlignment"] = Enum.TextXAlignment.Left;
					Label["26"]["TextYAlignment"] = Enum.TextYAlignment.Top;
					Label["26"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
					-- Label["26"]["FontFace"] = ;
					Label["26"]["Selectable"] = true;
					Label["26"]["TextSize"] = 14;
					Label["26"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
					Label["26"]["AnchorPoint"] = Vector2.new(1, 0.5);
					Label["26"]["Size"] = UDim2.new(1, 0, 1, -10);
					Label["26"]["Text"] = Options.Message;
					Label["26"]["Active"] = true;
					Label["26"]["Name"] = [[Text]];
					Label["26"]["Font"] = Enum.Font.Ubuntu;
					Label["26"]["BackgroundTransparency"] = 1;
					Label["26"]["Position"] = UDim2.new(1, -5, 0.5, 0);
					Label["26"]["TextWrapped"] = true;
	
					Label["Padding"] = Instance.new("UIPadding",Label["26"]);
					Label["Padding"]["PaddingLeft"] = UDim.new(0,35)
				end
				
				-- [[ Methods ]]
				function Label:SetText(txt)
					Options.Message = txt
					Label:_Update()
				end
					
				function Label:Delete()
					Label["22"]:Destroy()
				end
	
				function Label:_Update()
					Label["26"].Text = Options.Message
	
					Label["22"].Size = UDim2.new(Label["26"].Size.X.Scale,Label["26"].Size.X.Offset,0,math.huge)
					Label["22"].Size = UDim2.new(Label["26"].Size.X.Scale,Label["26"].Size.X.Offset,0,Label["26"].TextBounds.Y)
					Label["22"].Size = UDim2.new(Label["22"].Size.X.Scale,Label["22"].Size.X.Offset,0,Label["26"].TextBounds.Y + 10)
				end
	
				Label:_Update()
				return Label
			end
			
			function Tab:Slider(Options)
				Options = Library:validate({
					Name = [[Slider Preview]];
					Minimum = 0;
					Maximum = 100;
					Default = 50;
					Callback = function(Value) end;
				},Options or {})
				
				local Slider = {
					MouseDown = false;
					Hover = false;
					Connection = nil;
				}
				
				-- [[ Render ]]
				do
					-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.Slider
					Slider["27"] = Instance.new("Frame", Section["18"]);
					Slider["27"]["BackgroundColor3"] = Color3.fromRGB(45, 45, 45);
					Slider["27"]["Size"] = UDim2.new(1, 0, 0, 40);
					Slider["27"]["Name"] = [[Slider]];
	
					-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.Slider.UICorner
					Slider["28"] = Instance.new("UICorner", Slider["27"]);
					Slider["28"]["CornerRadius"] = UDim.new(0, 4);
	
					-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.Slider.UIStroke
					Slider["29"] = Instance.new("UIStroke", Slider["27"]);
					Slider["29"]["Color"] = Color3.fromRGB(108, 108, 108);
					Slider["29"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;
	
					-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.Slider.Text
					Slider["2a"] = Instance.new("TextLabel", Slider["27"]);
					Slider["2a"]["TextXAlignment"] = Enum.TextXAlignment.Left;
					Slider["2a"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
					-- Slider["2a"]["FontFace"] = ;
					Slider["2a"]["Selectable"] = true;
					Slider["2a"]["TextSize"] = 14;
					Slider["2a"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
					Slider["2a"]["Size"] = UDim2.new(0, 253, 0, 20);
					Slider["2a"]["Active"] = true;
					Slider["2a"]["Text"] = Options.Name;
					Slider["2a"]["Name"] = [[Text]];
					Slider["2a"]["Font"] = Enum.Font.Ubuntu;
					Slider["2a"]["BackgroundTransparency"] = 1;
					Slider["2a"]["Position"] = UDim2.new(0, 5, 0, 5);
	
					-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.Slider.Value
					Slider["2b"] = Instance.new("TextLabel", Slider["27"]);
					Slider["2b"]["TextWrapped"] = true;
					Slider["2b"]["TextXAlignment"] = Enum.TextXAlignment.Left;
					Slider["2b"]["TextScaled"] = true;
					Slider["2b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
					-- Slider["2b"]["FontFace"] = ;
					Slider["2b"]["Selectable"] = true;
					Slider["2b"]["TextSize"] = 14;
					Slider["2b"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
					Slider["2b"]["AnchorPoint"] = Vector2.new(1, 0);
					Slider["2b"]["Size"] = UDim2.new(0, 20, 0, 20);
					Slider["2b"]["Active"] = true;
					Slider["2b"]["Text"] = tostring(Options.Default);
					Slider["2b"]["Name"] = [[Value]];
					Slider["2b"]["Font"] = Enum.Font.Ubuntu;
					Slider["2b"]["BackgroundTransparency"] = 1;
					Slider["2b"]["Position"] = UDim2.new(1, -5, 0, 5);
	
					-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.Slider.SliderBack
					Slider["2c"] = Instance.new("Frame", Slider["27"]);
					Slider["2c"]["BackgroundColor3"] = Color3.fromRGB(99, 99, 99);
					Slider["2c"]["AnchorPoint"] = Vector2.new(0, 1);
					Slider["2c"]["Size"] = UDim2.new(1, -10, 0, 10);
					Slider["2c"]["Position"] = UDim2.new(0, 5, 1, -5);
					Slider["2c"]["Name"] = [[SliderBack]];
	
					-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.Slider.SliderBack.UICorner
					Slider["2d"] = Instance.new("UICorner", Slider["2c"]);
					Slider["2d"]["CornerRadius"] = UDim.new(100, 100);
					
					-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.Slider.SliderBack.UIStroke
					Slider["Stoke"] = Instance.new("UIStroke", Slider["2c"]);
					Slider["Stoke"]["Color"] = Color3.fromRGB(255, 255, 255);
					Slider["Stoke"]["Thickness"] = 1
	
					-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.Slider.SliderBack.Draggable
					Slider["2e"] = Instance.new("Frame", Slider["2c"]);
					Slider["2e"]["BackgroundColor3"] = Color3.fromRGB(60, 60, 60);
					Slider["2e"]["Size"] = UDim2.new(0, 100, 1, 0);
					Slider["2e"]["Name"] = [[Draggable]];
	
					-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.Slider.SliderBack.Draggable.UICorner
					Slider["2f"] = Instance.new("UICorner", Slider["2e"]);
					Slider["2f"]["CornerRadius"] = UDim.new(100, 100);
				end
				
				-- [[ Methods ]]
				function Slider:SetValue(Value)
					if Value == nil then
						local percentage = math.clamp((Mouse.X - Slider["27"].AbsolutePosition.X) / (Slider["27"].AbsoluteSize.X),0,1)
						local value = math.floor(((Options.Maximum - Options.Minimum) * percentage) + Options.Minimum)
	
						Slider["2b"].Text = tostring(value)
						Slider["2e"].Size = UDim2.fromScale(percentage,1)
					else
						Slider["2b"].Text = tostring(Value)
						Slider["2e"].Size = UDim2.fromScale(((Value - Options.Minimum) / (Options.Maximum - Options.Minimum)),1)
					end
					Options.Callback(Slider:GetValue())
				end
				
				function Slider:GetValue()
					return tonumber(Slider["2b"].Text)
				end
				
				function Slider:SetCallback(func)
					Options.Callback = func
				end	
					
					function Slider:SetMinimum(func)
						Options.Minimum = func
					end
					
					function Slider:SetMaximum(func)
						Options.Maximum = func
					end
					
					function Slider:SetTitle(txt)
						Options.Name = txt
					end
	
					function Slider:Delete()
						Slider["27"]:Destroy()
					end
				-- [[ Logic ]]
				do
					Slider["27"].MouseEnter:Connect(function()
						Slider.Hover = true
						Library:tween(Slider["2c"],{BackgroundColor3 = Color3.fromRGB(180,180,180)})
						Library:tween(Slider["Stoke"],{Color = Color3.fromRGB(255,255,255)})
						Library:tween(Slider["2e"],{BackgroundColor3 = Color3.fromRGB(255,255,255)})
					end)
	
					Slider["27"].MouseLeave:connect(function()
						Slider.Hover = false
	
						if not Slider.MouseDown then
							Library:tween(Slider["2c"],{BackgroundColor3 = Color3.fromRGB(99,99,99)})
							Library:tween(Slider["Stoke"],{Color = Color3.fromRGB(175,175,175)})
							Library:tween(Slider["2e"],{BackgroundColor3 = Color3.fromRGB(60,60,60)})
						end
					end)
	
					UserInputService.InputBegan:Connect(function(input)
						if input.UserInputType == Enum.UserInputType.MouseButton1 and Slider.Hover then
							Slider.MouseDown = true
							Library:tween(Slider["Stoke"],{Color = Color3.fromRGB(255,255,255)})
							Library:tween(Slider["2e"],{BackgroundColor3 = Color3.fromRGB(150,150,150)})
							
							if not Slider.Connection then
								Slider.Connection = RunService.RenderStepped:Connect(function()
									Slider:SetValue()
								end)
							end
						end
					end)
					
					UserInputService.InputEnded:Connect(function(input)
						if input.UserInputType == Enum.UserInputType.MouseButton1 then
							Slider.MouseDown = false
	
							if Slider.Hover then
								-- [[ Hovering State ]]
								Library:tween(Slider["Stoke"],{Color = Color3.fromRGB(175,175,175)})
								Library:tween(Slider["2e"],{BackgroundColor3 = Color3.fromRGB(150,150,150)})
							else
								-- [[ Reset ]]
								Library:tween(Slider["Stoke"],{Color = Color3.fromRGB(255,255,255)})
								Library:tween(Slider["2e"],{BackgroundColor3 = Color3.fromRGB(60,60,60)})
							end
							
							if Slider.Connection then Slider.Connection:Disconnect() end
							Slider.Connection = nil
						end
					end)
				end
				
				return Slider
			end
			
			function Tab:Toggle(Options)
				Options = Library:validate({
					Name = [[Toggle Preview]];
					Callback = function(Value) end
				},Options or {})
				
				local Toggle = {
					Hover = false;
					Value = false;
				}
				
				-- [[ Render ]]
				do
					-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.Toggle (Inactive)
					Toggle["51"] = Instance.new("Frame", Section["18"]);
					Toggle["51"]["BackgroundColor3"] = Color3.fromRGB(45, 45, 45);
					Toggle["51"]["Size"] = UDim2.new(1, 0, 0, 30);
					Toggle["51"]["Name"] = [[Toggle]];
	
					-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.Toggle (Inactive).UICorner
					Toggle["52"] = Instance.new("UICorner", Toggle["51"]);
					Toggle["52"]["CornerRadius"] = UDim.new(0, 4);
	
					-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.Toggle (Inactive).UIStroke
					Toggle["53"] = Instance.new("UIStroke", Toggle["51"]);
					Toggle["53"]["Color"] = Color3.fromRGB(108, 108, 108);
					Toggle["53"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;
	
					-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.Toggle (Inactive).Title
					Toggle["54"] = Instance.new("TextLabel", Toggle["51"]);
					Toggle["54"]["TextXAlignment"] = Enum.TextXAlignment.Left;
					Toggle["54"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
					-- Toggle["54"]["FontFace"] = ;
					Toggle["54"]["Selectable"] = true;
					Toggle["54"]["TextSize"] = 14;
					Toggle["54"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
					Toggle["54"]["AnchorPoint"] = Vector2.new(0, 0.5);
					Toggle["54"]["Size"] = UDim2.new(1, -35, 1, -10);
					Toggle["54"]["Active"] = true;
					Toggle["54"]["Text"] = Options.Name;
					Toggle["54"]["Name"] = [[Title]];
					Toggle["54"]["Font"] = Enum.Font.Ubuntu;
					Toggle["54"]["BackgroundTransparency"] = 1;
					Toggle["54"]["Position"] = UDim2.new(0, 5, 0.5, 0);
	
					-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.Toggle (Inactive).Value
					Toggle["55"] = Instance.new("Frame", Toggle["51"]);
					Toggle["55"]["BackgroundColor3"] = Color3.fromRGB(156, 0, 0);
					Toggle["55"]["AnchorPoint"] = Vector2.new(1, 0);
					Toggle["55"]["Size"] = UDim2.new(0, 20, 1, -10);
					Toggle["55"]["Position"] = UDim2.new(1, -5, 0, 5);
					Toggle["55"]["Name"] = [[Value]];
	
					-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.Toggle (Inactive).Value.UICorner
					Toggle["56"] = Instance.new("UICorner", Toggle["55"]);
					Toggle["56"]["CornerRadius"] = UDim.new(0, 4);
	
					-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.Toggle (Inactive).Value.UIStroke
					Toggle["57"] = Instance.new("UIStroke", Toggle["55"]);
					Toggle["57"]["Color"] = Color3.fromRGB(56, 0, 0);
					Toggle["57"]["Thickness"] = 2;
					Toggle["57"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;
				end
				
				-- [[ Methods ]]
				function Toggle:Activate()
					Toggle.Value = true
					Library:tween(Toggle["57"],{Color = Color3.fromRGB(0,56,0)})
					Library:tween(Toggle["55"],{BackgroundColor3 = Color3.fromRGB(0,156,0)})
					Options.Callback(Toggle.Value)
				end
				function Toggle:Deactivate()
					Toggle.Value = false
					Library:tween(Toggle["57"],{Color = Color3.fromRGB(56,0,0)})
					Library:tween(Toggle["55"],{BackgroundColor3 = Color3.fromRGB(156,0,0)})
					Options.Callback(Toggle.Value)
				end
				
				function Toggle:SetCallback(func)
					Options.Callback = func
				end
				
				function Toggle:SetName(txt)
					Options.Name = txt
				end
	
				function Toggle:Delete()
					Toggle["51"]:Destroy()
				end
				
				-- [[ Logic ]]
				do
					Toggle["55"].MouseEnter:Connect(function()
						Toggle.Hover = true
						Library:tween(Toggle["57"],{Color = Color3.fromRGB(255,255,255)})
					end)
	
					Toggle["55"].MouseLeave:Connect(function()
						Toggle.Hover = false
						if Toggle.Value then
							Library:tween(Toggle["57"],{Color = Color3.fromRGB(0,56,0)})
						else
							Library:tween(Toggle["57"],{Color = Color3.fromRGB(56,0,0)})
						end
					end)
					
					UserInputService.InputBegan:Connect(function(input)
						if input.UserInputType == Enum.UserInputType.MouseButton1 then
							if Toggle.Hover then
								if Toggle.Value then
									Toggle:Deactivate()
								else
									Toggle:Activate()
								end
							end
						end
					end)
				end
				return Toggle
			end
				
				function Tab:Dropdown(Options)
					Options = Library:validate({
						Name = [[Dropdown Preview]];
						Items = {};
						Callback = function() end;
					},Options or {})
					
					local Dropdown = {
						Items = {
							["id"] = {
								"Value";
							};						
						};
						Opened = false;
						Hover = false;
						MouseDown = false;
					}
					
					-- [[ Render ]]
					do
						-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.Dropdown
						Dropdown["32"] = Instance.new("Frame", Section["18"]);
						Dropdown["32"]["BackgroundColor3"] = Color3.fromRGB(45, 45, 45);
						Dropdown["32"]["Size"] = UDim2.new(1, 0, 0, 30);
						Dropdown["32"]["Name"] = [[Dropdown]];
	
						-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.Dropdown.UICorner
						Dropdown["33"] = Instance.new("UICorner", Dropdown["32"]);
						Dropdown["33"]["CornerRadius"] = UDim.new(0, 4);
	
						-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.Dropdown.UIStroke
						Dropdown["34"] = Instance.new("UIStroke", Dropdown["32"]);
						Dropdown["34"]["Color"] = Color3.fromRGB(108, 108, 108);
						Dropdown["34"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;
	
						-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.Dropdown.Icon
						Dropdown["35"] = Instance.new("ImageLabel", Dropdown["32"]);
						Dropdown["35"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
						Dropdown["35"]["Selectable"] = true;
						Dropdown["35"]["AnchorPoint"] = Vector2.new(1, 0);
						Dropdown["35"]["Image"] = [[rbxassetid://10889644850]];
						Dropdown["35"]["Size"] = UDim2.new(0, 20, 0, 20);
						Dropdown["35"]["Active"] = true;
						Dropdown["35"]["Name"] = [[Icon]];
						Dropdown["35"]["BackgroundTransparency"] = 1;
						Dropdown["35"]["Position"] = UDim2.new(1, -5, 0, 5);
	
						-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.Dropdown.OptionHolder
						Dropdown["36"] = Instance.new("ScrollingFrame", Dropdown["32"]);
						Dropdown["36"]["Active"] = true;
						Dropdown["36"]["BorderSizePixel"] = 0;
						Dropdown["36"]["CanvasSize"] = UDim2.new(0, 0, 5, 0);
						Dropdown["36"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
						Dropdown["36"]["AnchorPoint"] = Vector2.new(0, 1);
						Dropdown["36"]["BackgroundTransparency"] = 1;
						Dropdown["36"]["Size"] = UDim2.new(1, -10, 1, -35);
						Dropdown["36"]["ScrollBarImageColor3"] = Color3.fromRGB(0, 0, 0);
						Dropdown["36"]["ScrollBarThickness"] = 0;
						Dropdown["36"]["Position"] = UDim2.new(0, 5, 1, -5);
						Dropdown["36"]["Visible"] = true;
						Dropdown["36"]["Name"] = [[OptionHolder]];
	
						-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.Dropdown.OptionHolder.UIListLayout
						Dropdown["37"] = Instance.new("UIListLayout", Dropdown["36"]);
						Dropdown["37"]["Padding"] = UDim.new(0, 5);
						Dropdown["37"]["SortOrder"] = Enum.SortOrder.LayoutOrder;
	
						-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.Dropdown.OptionHolder.UIPadding
						Dropdown["38"] = Instance.new("UIPadding", Dropdown["36"]);
						Dropdown["38"]["PaddingTop"] = UDim.new(0, 1);
						Dropdown["38"]["PaddingRight"] = UDim.new(0, 1);
						Dropdown["38"]["PaddingBottom"] = UDim.new(0, 1);
						Dropdown["38"]["PaddingLeft"] = UDim.new(0, 1);
						-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.Dropdown.Click
						Dropdown["42"] = Instance.new("TextLabel", Dropdown["32"]);
						Dropdown["42"]["TextXAlignment"] = Enum.TextXAlignment.Left;
						Dropdown["42"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
						-- Dropdown["42"]["FontFace"] = ;
						Dropdown["42"]["Selectable"] = true;
						Dropdown["42"]["TextSize"] = 14;
						Dropdown["42"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
						Dropdown["42"]["Size"] = UDim2.new(1, -35, 0, 20);
						Dropdown["42"]["Active"] = true;
						Dropdown["42"]["Text"] = Options.Name;
						Dropdown["42"]["Name"] = [[Click]];
						Dropdown["42"]["Font"] = Enum.Font.Ubuntu;
						Dropdown["42"]["BackgroundTransparency"] = 1;
						Dropdown["42"]["Position"] = UDim2.new(0, 5, -0, 5);
					end
					
					-- [[ Methods ]]
					do
						function Dropdown:Add(id,value)
							local Item = {
								Hover = false;
								MouseDown = false;
							}
							if Dropdown.Items[id] ~= nil then
								warn(id .. " Already Exists!")
								return
							end
							Dropdown.Items[id] = {
								instance = {};
								Value = value;
							}
							-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.Dropdown.OptionHolder.Inactive
							Dropdown.Items[id].instance["3f"] = Instance.new("TextLabel", Dropdown["36"]);
							Dropdown.Items[id].instance["3f"]["TextWrapped"] = true;
							Dropdown.Items[id].instance["3f"]["BackgroundColor3"] = Color3.fromRGB(60, 60, 60);
							-- Dropdown.Items[id].Instance["3f"]["FontFace"] = ;
							Dropdown.Items[id].instance["3f"]["Selectable"] = true;
							Dropdown.Items[id].instance["3f"]["TextSize"] = 16;
							Dropdown.Items[id].instance["3f"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
							Dropdown.Items[id].instance["3f"]["Size"] = UDim2.new(1, 0, 0, 16);
							Dropdown.Items[id].instance["3f"]["Active"] = true;
							Dropdown.Items[id].instance["3f"]["Text"] = id;
							Dropdown.Items[id].instance["3f"]["Name"] = [[Inactive]];
							Dropdown.Items[id].instance["3f"]["Font"] = Enum.Font.Ubuntu;
	
							-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.Dropdown.Items[id].Instance.OptionHolder.Inactive.UIStroke
							Dropdown.Items[id].instance["40"] = Instance.new("UIStroke", Dropdown.Items[id].instance["3f"]);
							Dropdown.Items[id].instance["40"]["Color"] = Color3.fromRGB(255, 255, 255);
							Dropdown.Items[id].instance["40"]["Transparency"] = 0.800000011920929;
							Dropdown.Items[id].instance["40"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;
	
							-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.Dropdown.Items[id].Instance.OptionHolder.Inactive.UICorner
							Dropdown.Items[id].instance["41"] = Instance.new("UICorner", Dropdown.Items[id].instance["3f"]);
							Dropdown.Items[id].instance["41"]["CornerRadius"] = UDim.new(0, 4);
							
							Dropdown.Items[id].instance["3f"].MouseEnter:Connect(function()
								Item.Hover = true
								Library:tween(Dropdown.Items[id].instance["40"],{Color = Color3.fromRGB(180,180,180)})
							end)
	
							Dropdown.Items[id].instance["3f"].MouseLeave:Connect(function()
								Item.Hover = false
	
								if not Item.MouseDown then
									Library:tween(Dropdown.Items[id].instance["40"],{Color = Color3.fromRGB(108,108,108)})
								end
							end)
	
							UserInputService.InputBegan:Connect(function(input)
								if input.UserInputType == Enum.UserInputType.MouseButton1 and Item.Hover then
									Item.MouseDown = true
									Library:tween(Dropdown.Items[id].instance["3f"],{BackgroundColor3 = Color3.fromRGB(136, 136, 136)})
									Library:tween(Dropdown.Items[id].instance["40"],{Color = Color3.fromRGB(200,200,200)})
									Options.Callback(value)
								end
							end)
	
							UserInputService.InputEnded:Connect(function(input)
								if input.UserInputType == Enum.UserInputType.MouseButton1 then
									Item.MouseDown = false
	
									if Item.Hover then
										-- [[ Hovering State ]]
										Library:tween(Dropdown.Items[id].instance["3f"],{BackgroundColor3 = Color3.fromRGB(45,45,45)})
										Library:tween(Dropdown.Items[id].instance["40"],{Color = Color3.fromRGB(180,180,180)})
									else
										-- [[ Reset ]]
										Library:tween(Dropdown.Items[id].instance["3f"],{BackgroundColor3 = Color3.fromRGB(45,45,45)})
										Library:tween(Dropdown.Items[id].instance["40"],{Color = Color3.fromRGB(108,108,108)})
									end
								end
							end)
						end
	
						function Dropdown:Remove(id)
							if Dropdown.Items[id] ~= nil then
								for i, v in pairs(Dropdown.Items[id].instance) do
									v:Destroy()
								end
								Dropdown.Items[id] = nil
							end
						end
	
						function Dropdown:Clear()
							for i,v in pairs(Dropdown.Items) do
								Dropdown:Remove(i)
							end
						end
	
						function Dropdown:Delete()
							Dropdown["32"]:Destroy()
						end
	
						function Dropdown:Toggle()
							if Dropdown.Opened then
								
								Dropdown["32"]:TweenSize(UDim2.new(1,0,0,30),0.2)
								repeat wait() until Dropdown["32"].Size == UDim2.new(1,0,0,30)
								Dropdown.Opened = false
							else
								Dropdown["32"]:TweenSize(UDim2.new(1,0,0,102),0.2)
								repeat wait() until Dropdown["32"].Size == UDim2.new(1,0,0,102)
								Dropdown.Opened = true
							end
						end
					end
					
					-- [[ Logic ]]
					do
						Dropdown["42"].MouseEnter:Connect(function()
							Dropdown.Hover = true
							Library:tween(Dropdown["34"],{Color = Color3.fromRGB(180,180,180)})
						end)
	
						Dropdown["42"].MouseLeave:Connect(function()
							Dropdown.Hover = false
	
							if not Dropdown.MouseDown then
								Library:tween(Dropdown["34"],{Color = Color3.fromRGB(108,108,108)})
							end
						end)
	
						UserInputService.InputBegan:Connect(function(input)
							if input.UserInputType == Enum.UserInputType.MouseButton1 and Dropdown.Hover then
								Dropdown.MouseDown = true
								Library:tween(Dropdown["32"],{BackgroundColor3 = Color3.fromRGB(136, 136, 136)})
								Library:tween(Dropdown["34"],{Color = Color3.fromRGB(200,200,200)})
								Dropdown:Toggle()
							end
						end)
	
						UserInputService.InputEnded:Connect(function(input)
							if input.UserInputType == Enum.UserInputType.MouseButton1 then
								Dropdown.MouseDown = false
	
								if Dropdown.Hover then
									-- [[ Hovering State ]]
									Library:tween(Dropdown["32"],{BackgroundColor3 = Color3.fromRGB(45,45,45)})
									Library:tween(Dropdown["34"],{Color = Color3.fromRGB(180,180,180)})
								else
									-- [[ Reset ]]
									Library:tween(Dropdown["32"],{BackgroundColor3 = Color3.fromRGB(45,45,45)})
									Library:tween(Dropdown["34"],{Color = Color3.fromRGB(108,108,108)})
								end
							end
						end)
					end
					return Dropdown
				end
				
				function Tab:TextBox(Options)
					Options = Library:validate({
						Name = [[Textbox Preview]];
						RemoveTextOnFocusLost = false;
						PlaceHolderText = "PlaceHolderText";
						RemoveTextOnClicked = false;
						Callback = function() end
					},Options or {})
					
					local Textbox = {
						Hover = false;
					}
					
					-- [[ Render ]]
					do
						-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.Textbox
						Textbox["43"] = Instance.new("Frame", Section["18"]);
						Textbox["43"]["BackgroundColor3"] = Color3.fromRGB(45, 45, 45);
						Textbox["43"]["Size"] = UDim2.new(1, 0, 0, 50);
						Textbox["43"]["Name"] = [[Textbox]];
	
						-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.Textbox.UICorner
						Textbox["44"] = Instance.new("UICorner", Textbox["43"]);
						Textbox["44"]["CornerRadius"] = UDim.new(0, 4);
	
						-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.Textbox.UIStroke
						Textbox["45"] = Instance.new("UIStroke", Textbox["43"]);
						Textbox["45"]["Color"] = Color3.fromRGB(108, 108, 108);
						Textbox["45"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;
	
						-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.Textbox.Text
						Textbox["46"] = Instance.new("TextLabel", Textbox["43"]);
						Textbox["46"]["TextXAlignment"] = Enum.TextXAlignment.Left;
						Textbox["46"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
						-- Textbox["46"]["FontFace"] = ;
						Textbox["46"]["Selectable"] = true;
						Textbox["46"]["TextSize"] = 14;
						Textbox["46"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
						Textbox["46"]["Size"] = UDim2.new(1, -10, 0, 20);
						Textbox["46"]["Active"] = true;
						Textbox["46"]["Text"] = Options.Name;
						Textbox["46"]["Name"] = [[Text]];
						Textbox["46"]["Font"] = Enum.Font.Ubuntu;
						Textbox["46"]["BackgroundTransparency"] = 1;
						Textbox["46"]["Position"] = UDim2.new(0, 5, 0, 5);
	
						-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.Textbox.Box
						Textbox["47"] = Instance.new("TextBox", Textbox["43"]);
						Textbox["47"]["Active"] = false;
						Textbox["47"]["PlaceholderColor3"] = Color3.fromRGB(255, 255, 255);
						Textbox["47"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
						Textbox["47"]["TextXAlignment"] = Enum.TextXAlignment.Left;
						Textbox["47"]["TextWrapped"] = true;
						Textbox["47"]["TextSize"] = 10;
						Textbox["47"]["TextYAlignment"] = Enum.TextYAlignment.Top;
						Textbox["47"]["BackgroundColor3"] = Color3.fromRGB(99, 99, 99);
						-- Textbox["47"]["FontFace"] = ;
						Textbox["47"]["AnchorPoint"] = Vector2.new(0, 1);
						Textbox["47"]["PlaceholderText"] = Options.PlaceHolderText;
						Textbox["47"]["Size"] = UDim2.new(1, -10, 0, 20);
						Textbox["47"]["Selectable"] = false;
						Textbox["47"]["Text"] = [[]];
						Textbox["47"]["Position"] = UDim2.new(0, 5, 1, -5);
						Textbox["47"]["Font"] = Enum.Font.Ubuntu;
						Textbox["47"]["Name"] = [[Box]];
	
						-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.Textbox.Box.UICorner
						Textbox["48"] = Instance.new("UICorner", Textbox["47"]);
						Textbox["48"]["CornerRadius"] = UDim.new(0, 4);
	
						-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.Textbox.Box.UIPadding
						Textbox["49"] = Instance.new("UIPadding", Textbox["47"]);
						Textbox["49"]["PaddingTop"] = UDim.new(0, 2);
						Textbox["49"]["PaddingLeft"] = UDim.new(0, 2);
	
						-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.Textbox.Run
						Textbox["4a"] = Instance.new("TextLabel", Textbox["43"]);
						Textbox["4a"]["TextWrapped"] = true;
						Textbox["4a"]["TextScaled"] = true;
						Textbox["4a"]["BackgroundColor3"] = Color3.fromRGB(0, 156, 0);
						-- Textbox["4a"]["FontFace"] = ;
						Textbox["4a"]["TextSize"] = 14;
						Textbox["4a"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
						Textbox["4a"]["AnchorPoint"] = Vector2.new(1, 0);
						Textbox["4a"]["Size"] = UDim2.new(0, 40, 0, 15);
						Textbox["4a"]["Text"] = [[Run]];
						Textbox["4a"]["Name"] = [[Run]];
						Textbox["4a"]["Font"] = Enum.Font.Ubuntu;
						Textbox["4a"]["Position"] = UDim2.new(1, -5, 0, 5);
	
						-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.Textbox.Run.UICorner
						Textbox["4b"] = Instance.new("UICorner", Textbox["4a"]);
						Textbox["4b"]["CornerRadius"] = UDim.new(0, 4);
					end
	
					-- [[ Methods ]]
					function Textbox:Delete()
						Textbox["43"]:Destroy()
					end
					-- [[ Logic ]]
					do	
						Textbox["4a"].MouseEnter:Connect(function()
							Textbox.Hover = true
						end)
						
						Textbox["4a"].MouseLeave:Connect(function()
							Textbox.Hover = false
						end)
						
						UserInputService.InputBegan:Connect(function(input)
							if input.UserInputType == Enum.UserInputType.MouseButton1 then
								if Textbox.Hover then
									Options.Callback(Textbox["47"].Text)
									if Options.RemoveTextOnClicked then
										Textbox["47"].Text = ""
									end
									Textbox["47"].FocusLost:Connect(function()
										if Options.RemoveTextOnFocusLost then
											Textbox["47"].Text = ""
										end
									end)
								end
							end
						end)
					end
				end	
				
				function Tab:Keybind(Options)
					Options = Library:validate({
						Name = [[Keybind Preview]];
						Callback = function() end
					},Options or {})
					
					local Keybind = {
						Bind = nil;
						Hover = false;
						WaitingForInput = false;
					}
					
					Keybind.Bind = Enum.KeyCode.F
					
					-- [[ Render ]]
					do
						-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.Keybind
						Keybind["5a"] = Instance.new("Frame", Section["18"]);
						Keybind["5a"]["BackgroundColor3"] = Color3.fromRGB(45, 45, 45);
						Keybind["5a"]["Size"] = UDim2.new(1, 0, 0, 30);
						Keybind["5a"]["Name"] = [[Keybind]];
	
						-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.Keybind.UICorner
						Keybind["5b"] = Instance.new("UICorner", Keybind["5a"]);
						Keybind["5b"]["CornerRadius"] = UDim.new(0, 4);
	
						-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.Keybind.UIStroke
						Keybind["5c"] = Instance.new("UIStroke", Keybind["5a"]);
						Keybind["5c"]["Color"] = Color3.fromRGB(108, 108, 108);
						Keybind["5c"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;
	
						-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.Keybind.Click
						Keybind["5d"] = Instance.new("TextLabel", Keybind["5a"]);
						Keybind["5d"]["TextXAlignment"] = Enum.TextXAlignment.Left;
						Keybind["5d"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
						-- Keybind["5d"]["FontFace"] = ;
						Keybind["5d"]["Selectable"] = true;
						Keybind["5d"]["TextSize"] = 14;
						Keybind["5d"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
						Keybind["5d"]["AnchorPoint"] = Vector2.new(0, 0.5);
						Keybind["5d"]["Size"] = UDim2.new(1, -35, 1, -10);
						Keybind["5d"]["Active"] = true;
						Keybind["5d"]["Text"] = Options.Name;
						Keybind["5d"]["Name"] = [[Click]];
						Keybind["5d"]["Font"] = Enum.Font.Ubuntu;
						Keybind["5d"]["BackgroundTransparency"] = 1;
						Keybind["5d"]["Position"] = UDim2.new(0, 5, 0.5, 0);
	
						-- StarterGui.MicroLibrary.Main.ContentContainer.HomeTab.Keybind.Input
						Keybind["5e"] = Instance.new("TextLabel", Keybind["5a"]);
						Keybind["5e"]["TextWrapped"] = true;
						Keybind["5e"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
						Keybind["5e"]["TextSize"] = 10;
						Keybind["5e"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
						Keybind["5e"]["AnchorPoint"] = Vector2.new(1, 0);
						Keybind["5e"]["Size"] = UDim2.new(0, 30, 1, 0);
						Keybind["5e"]["Text"] = [[F]];
						Keybind["5e"]["Name"] = [[Input]];
						Keybind["5e"]["BackgroundTransparency"] = 1;
						Keybind["5e"]["Position"] = UDim2.new(1, 0, 0, 0);
					end
					
					-- [[ Methods ]]
					function Keybind:ChangeBind(func)
						Keybind.Bind = func
					end
					
					function Keybind:SetTitle(txt)
						Options.Name = txt
					end
					
					function Keybind:SetCallback(func)
						Options.Callback = func
					end
	
					function Keybind:Delete()
						Keybind["5a"]:Destroy()
					end
					
					-- [[ Logic ]]
					do
						Keybind["5a"].MouseEnter:Connect(function()
							Keybind.Hover = true
						end)
						
						Keybind["5a"].MouseLeave:Connect(function()
							Keybind.Hover = false
						end)
						
						UserInputService.InputBegan:Connect(function(input)
							if input.UserInputType == Enum.UserInputType.MouseButton1 then
								if Keybind.Hover then
									Keybind.WaitingForInput = true
									Keybind["5e"].Text = "[..]"
								end
							elseif input.UserInputType == Enum.UserInputType.Keyboard then
								if Keybind.WaitingForInput then
									Keybind.WaitingForInput = false
									Keybind.Bind = input.KeyCode
									Keybind["5e"].Text = tostring(input.KeyCode):Split("Enum.KeyCode.")
								end
							elseif input.KeyCode == Enum.KeyCode[Keybind.Bind] then
								Options.Callback()						
							end
						end)
					end
					return Keybind	
				end
			end
			return Tab	
		end
		end
	
	function GUI:Notify(Options)
		Options = Library:validate({
			Title = [[Notification Preview]];
			Question = [[Question]];
			Duration = 6;
			Items = {};
		},Options or {})
		
		local Notify = {
			Items = {
				["id"] = {
					TextColor = Color3.fromRGB(255,255,255);
					BackgroundColor = Color3.fromRGB(54,54,54);
					Callback = function() end;
				};						
			};
		}
		
		-- [[ Render ]]
		do
			-- StarterGui.MicroLibrary.Notifications.Notification
			Notify["66"] = Instance.new("Frame", GUI["64"]);
			Notify["66"]["BackgroundColor3"] = Color3.fromRGB(32, 32, 32);
			Notify["66"]["Size"] = UDim2.new(1, 0, 0, 100);
			Notify["66"]["Name"] = [[Notification]];
			
			-- StarterGui.MicroLibrary.Notifications.Notification.UICorner
			Notify["67"] = Instance.new("UICorner", Notify["66"]);
			Notify["67"]["CornerRadius"] = UDim.new(0, 4);

			-- StarterGui.MicroLibrary.Notifications.Notification.Title
			Notify["68"] = Instance.new("TextLabel", Notify["66"]);
			Notify["68"]["TextXAlignment"] = Enum.TextXAlignment.Left;
			Notify["68"]["TextYAlignment"] = Enum.TextYAlignment.Top;
			Notify["68"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
			-- Notify["68"]["FontFace"] = ;
			Notify["68"]["TextSize"] = 13;
			Notify["68"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
			Notify["68"]["Size"] = UDim2.new(0, 200, 0, 20);
			Notify["68"]["Text"] = Options.Title;
			Notify["68"]["Name"] = [[Title]];
			Notify["68"]["Font"] = Enum.Font.Ubuntu;
			Notify["68"]["BackgroundTransparency"] = 1;

			-- StarterGui.MicroLibrary.Notifications.Notification.Title.UIPadding
			Notify["69"] = Instance.new("UIPadding", Notify["68"]);
			Notify["69"]["PaddingTop"] = UDim.new(0, 2);
			Notify["69"]["PaddingLeft"] = UDim.new(0, 2);

			-- StarterGui.MicroLibrary.Notifications.Notification.Question
			Notify["6a"] = Instance.new("TextLabel", Notify["66"]);
			Notify["6a"]["TextXAlignment"] = Enum.TextXAlignment.Left;
			Notify["6a"]["TextYAlignment"] = Enum.TextYAlignment.Top;
			Notify["6a"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
			Notify["6a"]["TextTransparency"] = 0.30000001192092896;
			-- Notify["6a"]["FontFace"] = ;
			Notify["6a"]["TextSize"] = 13;
			Notify["6a"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
			Notify["6a"]["Size"] = UDim2.new(0, 200, 0, 20);
			Notify["6a"]["Text"] = Options.Question .. "?";
			Notify["6a"]["Name"] = [[Question]];
			Notify["6a"]["Font"] = Enum.Font.Ubuntu;
			Notify["6a"]["BackgroundTransparency"] = 1;
			Notify["6a"]["Position"] = UDim2.new(0, 0, 0, 20);

			-- StarterGui.MicroLibrary.Notifications.Notification.Question.UIPadding
			Notify["6b"] = Instance.new("UIPadding", Notify["6a"]);
			Notify["6b"]["PaddingTop"] = UDim.new(0, 2);
			Notify["6b"]["PaddingLeft"] = UDim.new(0, 2);

			-- StarterGui.MicroLibrary.Notifications.Notification.Answers
			Notify["6c"] = Instance.new("ScrollingFrame", Notify["66"]);
			Notify["6c"]["CanvasSize"] = UDim2.new(0, 0, 5, 0);
			Notify["6c"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
			Notify["6c"]["AnchorPoint"] = Vector2.new(1, 1);
			Notify["6c"]["BackgroundTransparency"] = 1;
			Notify["6c"]["Size"] = UDim2.new(1, -20, 1, -60);
			Notify["6c"]["Selectable"] = false;
			Notify["6c"]["ScrollBarThickness"] = 0;
			Notify["6c"]["Position"] = UDim2.new(1, -10, 1, -10);
			Notify["6c"]["Name"] = [[Answers]];
			Notify["6c"]["SelectionGroup"] = false;

			-- StarterGui.MicroLibrary.Notifications.Notification.Answers.UIGridLayout
			Notify["6d"] = Instance.new("UIGridLayout", Notify["6c"]);
			Notify["6d"]["SortOrder"] = Enum.SortOrder.LayoutOrder;
			Notify["6d"]["CellSize"] = UDim2.new(0.5, -10, 0, 30);
			Notify["6d"]["CellPadding"] = UDim2.new(0, 10, 0, 10);
		end
		
		-- [[ Methods ]]
		function Notify:Add(id,TextColor3,BackgroundColor3,Callbackfunc)
			local Item = {
				Hover = false;
			}
			if Notify.Items[id] ~= nil then
				warn(id .. " Already Exists!")
				return
			end
			Notify.Items[id] = {
				instance = {};
				TextColor = TextColor3;
				BackgroundColor = BackgroundColor3;
				Callback = Callbackfunc
			}
			-- [[ Render ]]
			do
				-- StarterGui.MicroLibrary.Notifications.Notification.Answers.Answer
				Notify.Items[id].instance["6e"] = Instance.new("TextLabel", Notify["6c"]);
				Notify.Items[id].instance["6e"]["BackgroundColor3"] = BackgroundColor3;
				-- Item["6e"]["FontFace"] = ;
				Notify.Items[id].instance["6e"]["Selectable"] = true;
				Notify.Items[id].instance["6e"]["TextSize"] = 16;
				Notify.Items[id].instance["6e"]["TextColor3"] = TextColor3;
				Notify.Items[id].instance["6e"]["Size"] = UDim2.new(0, 200, 0, 50);
				Notify.Items[id].instance["6e"]["Active"] = true;
				Notify.Items[id].instance["6e"]["Text"] = id;
				Notify.Items[id].instance["6e"]["Name"] = [[Answer]];
				Notify.Items[id].instance["6e"]["Font"] = Enum.Font.Ubuntu;

				-- StarterGui.MicroLibrary.Notifications.Notification.Answers.Answer.UICorner
				Notify.Items[id].instance["6f"] = Instance.new("UICorner", Notify.Items[id].instance["6e"]);
				Notify.Items[id].instance["6f"]["CornerRadius"] = UDim.new(0, 4);

				-- StarterGui.MicroLibrary.Notifications.Notification.Answers.UIPadding
				Notify.Items[id].instance["70"] = Instance.new("UIPadding", Notify.Items[id].instance["6c"]);
				Notify.Items[id].instance["70"]["PaddingTop"] = UDim.new(0, 10);
				Notify.Items[id].instance["70"]["PaddingLeft"] = UDim.new(0, 10);
			end
			
			Notify.Items[id].instance["6e"].MouseEnter:Connect(function()
				Item.Hover = true
			end)
			
			Notify.Items[id].instance["6e"].MouseLeave:Connect(function()
				Item.Hover = false
			end)
			
			UserInputService.InputBegan:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 then
					if Item.Hover then
						Notify.Items[id].Callback()
						Notify.Items[id].instance["6e"]:Destroy()
					end
				end
			end)
		end
		
		task.wait(Options.Duration)
		Notify:Destroy()
		return Notify
	end

	-- [[ KeySystem ]]

	if Options.KeySystem then
		local Key = {
			Close = false;
			Submit = false;
			Getkey = false;
		}
		GUI["2"].Visible = false
		warn("MUST DO KEYSYSTEM")
		task.wait(1)
-- [[ Render ]]
do
		-- StarterGui.MicroLibrary.Keysystem
		GUI["78"] = Instance.new("Frame", GUI["1"]);
		GUI["78"]["BackgroundColor3"] = Color3.fromRGB(43, 43, 43);
		GUI["78"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
		GUI["78"]["Size"] = UDim2.new(0, 400, 0, 200);
		GUI["78"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);
		GUI["78"]["Name"] = [[Keysystem]];
		
		-- StarterGui.MicroLibrary.Keysystem.UICorner
		GUI["79"] = Instance.new("UICorner", GUI["78"]);
		GUI["79"]["CornerRadius"] = UDim.new(0, 4);
		
		-- StarterGui.MicroLibrary.Keysystem.shadowHolder
		GUI["7a"] = Instance.new("Frame", GUI["78"]);
		GUI["7a"]["ZIndex"] = 0;
		GUI["7a"]["BackgroundTransparency"] = 1;
		GUI["7a"]["Size"] = UDim2.new(1, 0, 1, 0);
		GUI["7a"]["Name"] = [[shadowHolder]];
		
		-- StarterGui.MicroLibrary.Keysystem.shadowHolder.umbraShadow
		GUI["7b"] = Instance.new("ImageLabel", GUI["7a"]);
		GUI["7b"]["ZIndex"] = 0;
		GUI["7b"]["SliceCenter"] = Rect.new(10, 10, 118, 118);
		GUI["7b"]["ScaleType"] = Enum.ScaleType.Slice;
		GUI["7b"]["ImageColor3"] = Color3.fromRGB(0, 0, 0);
		GUI["7b"]["ImageTransparency"] = 0.8600000143051147;
		GUI["7b"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
		GUI["7b"]["Image"] = [[rbxassetid://1316045217]];
		GUI["7b"]["Size"] = UDim2.new(1, 10, 1, 10);
		GUI["7b"]["Name"] = [[umbraShadow]];
		GUI["7b"]["BackgroundTransparency"] = 1;
		GUI["7b"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);
		
		-- StarterGui.MicroLibrary.Keysystem.shadowHolder.penumbraShadow
		GUI["7c"] = Instance.new("ImageLabel", GUI["7a"]);
		GUI["7c"]["ZIndex"] = 0;
		GUI["7c"]["SliceCenter"] = Rect.new(10, 10, 118, 118);
		GUI["7c"]["ScaleType"] = Enum.ScaleType.Slice;
		GUI["7c"]["ImageColor3"] = Color3.fromRGB(0, 0, 0);
		GUI["7c"]["ImageTransparency"] = 0.8799999952316284;
		GUI["7c"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
		GUI["7c"]["Image"] = [[rbxassetid://1316045217]];
		GUI["7c"]["Size"] = UDim2.new(1, 10, 1, 10);
		GUI["7c"]["Name"] = [[penumbraShadow]];
		GUI["7c"]["BackgroundTransparency"] = 1;
		GUI["7c"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);
		
		-- StarterGui.MicroLibrary.Keysystem.shadowHolder.ambientShadow
		GUI["7d"] = Instance.new("ImageLabel", GUI["7a"]);
		GUI["7d"]["ZIndex"] = 0;
		GUI["7d"]["SliceCenter"] = Rect.new(10, 10, 118, 118);
		GUI["7d"]["ScaleType"] = Enum.ScaleType.Slice;
		GUI["7d"]["ImageColor3"] = Color3.fromRGB(0, 0, 0);
		GUI["7d"]["ImageTransparency"] = 0.8799999952316284;
		GUI["7d"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
		GUI["7d"]["Image"] = [[rbxassetid://1316045217]];
		GUI["7d"]["Size"] = UDim2.new(1, 10, 1, 10);
		GUI["7d"]["Name"] = [[ambientShadow]];
		GUI["7d"]["BackgroundTransparency"] = 1;
		GUI["7d"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);
		
		-- StarterGui.MicroLibrary.Keysystem.TopBar
		GUI["7e"] = Instance.new("Frame", GUI["78"]);
		GUI["7e"]["BorderSizePixel"] = 0;
		GUI["7e"]["BackgroundColor3"] = Color3.fromRGB(39, 39, 39);
		GUI["7e"]["Size"] = UDim2.new(1, 0, 0, 30);
		GUI["7e"]["Name"] = [[TopBar]];
		
		-- StarterGui.MicroLibrary.Keysystem.TopBar.UICorner
		GUI["7f"] = Instance.new("UICorner", GUI["7e"]);
		GUI["7f"]["CornerRadius"] = UDim.new(0, 4);
		
		-- StarterGui.MicroLibrary.Keysystem.TopBar.Hide
		GUI["80"] = Instance.new("Frame", GUI["7e"]);
		GUI["80"]["BorderSizePixel"] = 0;
		GUI["80"]["BackgroundColor3"] = Color3.fromRGB(39, 39, 39);
		GUI["80"]["AnchorPoint"] = Vector2.new(0, 1);
		GUI["80"]["Size"] = UDim2.new(1, 0, 0.25, 0);
		GUI["80"]["Position"] = UDim2.new(0, 0, 1, 0);
		GUI["80"]["Name"] = [[Hide]];
		
		-- StarterGui.MicroLibrary.Keysystem.TopBar.Line
		GUI["81"] = Instance.new("Frame", GUI["7e"]);
		GUI["81"]["BorderSizePixel"] = 0;
		GUI["81"]["BackgroundColor3"] = Color3.fromRGB(86, 0, 0);
		GUI["81"]["AnchorPoint"] = Vector2.new(0, 1);
		GUI["81"]["Size"] = UDim2.new(1, 0, 0.05000000074505806, 0);
		GUI["81"]["Position"] = UDim2.new(0, 0, 1, 0);
		GUI["81"]["Name"] = [[Line]];
		
		-- StarterGui.MicroLibrary.Keysystem.TopBar.Title
		GUI["82"] = Instance.new("TextLabel", GUI["7e"]);
		GUI["82"]["TextXAlignment"] = Enum.TextXAlignment.Left;
		GUI["82"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
		-- GUI["82"]["FontFace"] = ;
		GUI["82"]["TextSize"] = 14;
		GUI["82"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
		GUI["82"]["Size"] = UDim2.new(0, 300, 1, -3);
		GUI["82"]["Text"] = [[Sorry! But you have to do this Keysystem!]];
		GUI["82"]["Name"] = [[Title]];
		GUI["82"]["Font"] = Enum.Font.Gotham;
		GUI["82"]["BackgroundTransparency"] = 1;
		
		-- StarterGui.MicroLibrary.Keysystem.TopBar.Title.UIPadding
		GUI["83"] = Instance.new("UIPadding", GUI["82"]);
		GUI["83"]["PaddingLeft"] = UDim.new(0, 2);
		
		-- StarterGui.MicroLibrary.Keysystem.TopBar.Close
		GUI["84"] = Instance.new("TextButton", GUI["7e"]);
		GUI["84"]["TextWrapped"] = true;
		GUI["84"]["AutoButtonColor"] = false;
		GUI["84"]["TextScaled"] = true;
		GUI["84"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
		GUI["84"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
		-- GUI["84"]["FontFace"] = ;
		GUI["84"]["AnchorPoint"] = Vector2.new(1, 0);
		GUI["84"]["Size"] = UDim2.new(0, 27, 1, -3);
		GUI["84"]["Name"] = [[Close]];
		GUI["84"]["ClipsDescendants"] = true;
		GUI["84"]["Text"] = [[X]];
		GUI["84"]["Font"] = Enum.Font.GothamBold;
		GUI["84"]["Position"] = UDim2.new(1, 0, 0, 0);
		GUI["84"]["BackgroundTransparency"] = 1;
		
		-- StarterGui.MicroLibrary.Keysystem.ContentContainer
		GUI["85"] = Instance.new("Frame", GUI["78"]);
		GUI["85"]["BackgroundColor3"] = Color3.fromRGB(81, 81, 81);
		GUI["85"]["AnchorPoint"] = Vector2.new(1, 0);
		GUI["85"]["BackgroundTransparency"] = 1;
		GUI["85"]["Size"] = UDim2.new(1, -10, 1, -40);
		GUI["85"]["Position"] = UDim2.new(1, -5, 0, 35);
		GUI["85"]["Name"] = [[ContentContainer]];
		
		-- StarterGui.MicroLibrary.Keysystem.ContentContainer.Key
		GUI["86"] = Instance.new("TextBox", GUI["85"]);
		GUI["86"]["PlaceholderColor3"] = Color3.fromRGB(255, 255, 255);
		GUI["86"]["BorderSizePixel"] = 0;
		GUI["86"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
		GUI["86"]["TextXAlignment"] = Enum.TextXAlignment.Left;
		GUI["86"]["TextSize"] = 14;
		GUI["86"]["TextYAlignment"] = Enum.TextYAlignment.Top;
		GUI["86"]["BackgroundColor3"] = Color3.fromRGB(32, 32, 32);
		-- GUI["86"]["FontFace"] = ;
		GUI["86"]["AnchorPoint"] = Vector2.new(0.5, 0);
		GUI["86"]["PlaceholderText"] = [[Input Key Here]];
		GUI["86"]["Size"] = UDim2.new(0.699999988079071, 0, 0, 60);
		GUI["86"]["Text"] = [[]];
		GUI["86"]["Position"] = UDim2.new(0.5, 0, 0, 0);
		GUI["86"]["Font"] = Enum.Font.Ubuntu;
		GUI["86"]["Name"] = [[Key]];
		GUI["86"]["ClearTextOnFocus"] = false;
		
		-- StarterGui.MicroLibrary.Keysystem.ContentContainer.Key.UICorner
		GUI["87"] = Instance.new("UICorner", GUI["86"]);
		GUI["87"]["CornerRadius"] = UDim.new(0, 4);
		
		-- StarterGui.MicroLibrary.Keysystem.ContentContainer.Key.UIPadding
		GUI["88"] = Instance.new("UIPadding", GUI["86"]);
		GUI["88"]["PaddingTop"] = UDim.new(0, 2);
		GUI["88"]["PaddingLeft"] = UDim.new(0, 2);
		
		-- StarterGui.MicroLibrary.Keysystem.ContentContainer.Submit
		GUI["89"] = Instance.new("TextLabel", GUI["85"]);
		GUI["89"]["BackgroundColor3"] = Color3.fromRGB(32, 32, 32);
		-- GUI["89"]["FontFace"] = ;
		GUI["89"]["TextSize"] = 25;
		GUI["89"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
		GUI["89"]["AnchorPoint"] = Vector2.new(1, 0);
		GUI["89"]["Size"] = UDim2.new(0.3499999940395355, 0, 0, 60);
		GUI["89"]["Text"] = [[Submit Key]];
		GUI["89"]["Name"] = [[Submit]];
		GUI["89"]["Font"] = Enum.Font.Ubuntu;
		GUI["89"]["Position"] = UDim2.new(1, -60, 0.5, 0);
		
		-- StarterGui.MicroLibrary.Keysystem.ContentContainer.Submit.UICorner
		GUI["8a"] = Instance.new("UICorner", GUI["89"]);
		GUI["8a"]["CornerRadius"] = UDim.new(0, 4);
		
		-- StarterGui.MicroLibrary.Keysystem.ContentContainer.Getkey
		GUI["8b"] = Instance.new("TextLabel", GUI["85"]);
		GUI["8b"]["BackgroundColor3"] = Color3.fromRGB(32, 32, 32);
		-- GUI["8b"]["FontFace"] = ;
		GUI["8b"]["TextSize"] = 30;
		GUI["8b"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
		GUI["8b"]["Size"] = UDim2.new(0.3499999940395355, 0, 0, 60);
		GUI["8b"]["Text"] = [[Get Key]];
		GUI["8b"]["Name"] = [[Getkey]];
		GUI["8b"]["Font"] = Enum.Font.Ubuntu;
		GUI["8b"]["Position"] = UDim2.new(0, 60, 0.5, 0);
		
		-- StarterGui.MicroLibrary.Keysystem.ContentContainer.Getkey.UICorner
		GUI["8c"] = Instance.new("UICorner", GUI["8b"]);
		GUI["8c"]["CornerRadius"] = UDim.new(0, 4);
end

-- [[ Logic ]]
	do
		GUI["8b"].MouseEnter:Connect(function()
			Key.Getkey = true
		end)

		GUI["8b"].MouseLeave:Connect(function()
			Key.Getkey = false
		end)

		GUI["89"].MouseEnter:Connect(function()
			Key.Submit = true
		end)

		GUI["89"].MouseLeave:Connect(function()
			Key.Submit = false
		end)

		GUI["84"].MouseEnter:Connect(function()
			Key.Close = true
		end)

		GUI["84"].MouseLeave:Connect(function()
			Key.Close = false
		end)

		UserInputService.InputBegan:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseButton1 then
				if Key.Getkey then
					setclipboard(GUI.GetkeyLink)
				elseif Key.Submit then
					if GUI["86"].Text == Options.CorrectKey then
						GUI["2"].Visible = true
						GUI["78"]:Destroy()
					end
				elseif Key.Close then
					GUI["1"]:Destroy()
				end
			end
		end)
	end

	return Key
	end

	-- [[ GameId ]]
	if Options.GameIdNeeded then
		if game.PlaceId ~= Options.GameId then
			if Options.KickIfWrongGameId then
				if Options.KickReason ~= "" then
					Client:Kick("You Got The Wrong Game Buddy")
				else
					Client:Kick(Options.KickReason)
				end
			end
		end
	end

	return GUI
end
